{"inputs": [{"tagValue": "Path to the directory where genome files are stored (if runMode is not generateGenome) or will be generated (if runMode is generateGenome).", "tagAttributes": {"name": "INDIR_genomeDir", "optionName": "--genomeDir", "fileClass": "directory", "positional": "false", "optional": "true", "array": "false", "type": "IndexDirSTAR"}, "tagName": "input"}, {"tagValue": "Paths to files that contain input reads (one or, if needed, two files, separated by space).", "tagAttributes": {"name": "INFILE_readFilesIn", "optionName": "--readFilesIn", "fileClass": "file", "positional": "false", "optional": "true", "array": "false", "type": "FASTX"}, "tagName": "input"}, {"tagValue": "Path to the GTF file with annotations.", "tagAttributes": {"name": "INFILE_sjdbGTFfile", "optionName": "--sjdbGTFfile", "fileClass": "file", "positional": "false", "optional": "true", "array": "false", "type": "GTF"}, "tagName": "input"}, {"tagValue": "Path to BAM input file, to be used with --runMode inputAlignmentsFromBAM.", "tagAttributes": {"name": "INFILE_inputBAMfile", "optionName": "--inputBAMfile", "fileClass": "file", "positional": "false", "optional": "true", "array": "false", "type": "BAM"}, "tagName": "input"}, {"tagValue": "Path to a file with @CO (comment) lines, to be incorporated in the SAM header.", "tagAttributes": {"name": "INFILE_outSAMheaderCommentFile", "optionName": "--outSAMheaderCommentFile", "fileClass": "file", "positional": "false", "optional": "true", "array": "false", "type": "SAMCommentFile"}, "tagName": "input"}, {"tagValue": "Path(s) to the fasta files with genomic sequences for genome generation, separated by spaces. Only used if runMode==genomeGenerate. These files should be plain text FASTA files, i.e. they *cannot* be zipped.", "tagAttributes": {"name": "INFILE_genomeFastaFiles", "optionName": "--genomeFastaFiles", "fileClass": "file", "positional": "false", "optional": "true", "array": "false", "type": "FASTA"}, "tagName": "input"}, {"tagValue": "Path to files with genomic coordinates (chr &lt;tab&gt; start &lt;tab&gt; end &lt;tab&gt; strand) for splice junction introns. Multiple files can be supplied and will be concatenated.", "tagAttributes": {"name": "INFILE_sjdbFileChrStartEnd", "optionName": "--sjdbFileChrStartEnd", "fileClass": "file", "positional": "false", "optional": "true", "array": "false", "type": "SJFileSTAR"}, "tagName": "input"}], "parameters": [{"tagValue": "Command to execute for each of the input files. This command should generate FASTA or FASTQ text and send it to STDOUT. Example: zcat - to uncompress .gz files.", "tagAttributes": {"name": "readFilesCommand", "default": "-", "optionName": "--readFilesCommand", "positional": "false", "admin": "true", "range": "n/a", "type": "string", "class": "ExecutableReadFromSTDIN"}, "tagName": "parameter"}, {"tagValue": "Max proportion of mismatches for 3&apos; adpater clipping for each mate. If one value is given, it will be assumed the same for both mates.", "tagAttributes": {"name": "clip3pAdapterMMp", "default": "0.1", "optionName": "--clip3pAdapterMMp", "positional": "false", "admin": "false", "range": "(0:1){1,2}", "type": "string", "class": "FloatMultiOptionOnce"}, "tagName": "parameter"}, {"tagValue": "AlignSplicedMateMapLmin normalized to mate length.", "tagAttributes": {"name": "alignSplicedMateMapLminOverLmate", "default": "0.66", "optionName": "--alignSplicedMateMapLminOverLmate", "positional": "false", "admin": "false", "range": "]0:1", "type": "string", "class": "FloatRange"}, "tagName": "parameter"}, {"tagValue": "Penalty for a non-GT/AG chimeric junction.", "tagAttributes": {"name": "chimScoreJunctionNonGTAG", "default": "-1", "optionName": "--chimScoreJunctionNonGTAG", "positional": "false", "admin": "false", "range": ":", "type": "string", "class": "FloatRange"}, "tagName": "parameter"}, {"tagValue": "OutFilterMatchNmin normalized to read length (sum of mates&apos; lengths for paired-end reads).", "tagAttributes": {"name": "outFilterMatchNminOverLread", "default": "0.66", "optionName": "--outFilterMatchNminOverLread", "positional": "false", "admin": "false", "range": "0:1", "type": "string", "class": "FloatRange"}, "tagName": "parameter"}, {"tagValue": "Alignment will be output only if its ratio of mismatches to mapped length is less than this value.", "tagAttributes": {"name": "outFilterMismatchNoverLmax", "default": "0.3", "optionName": "--outFilterMismatchNoverLmax", "positional": "false", "admin": "false", "range": "0:", "type": "string", "class": "FloatRange"}, "tagName": "parameter"}, {"tagValue": "Alignment will be output only if its ratio of mismatches to read length is less than this value.", "tagAttributes": {"name": "outFilterMismatchNoverReadLmax", "default": "1", "optionName": "--outFilterMismatchNoverReadLmax", "positional": "false", "admin": "false", "range": "0:1", "type": "string", "class": "FloatRange"}, "tagName": "parameter"}, {"tagValue": "Alignment will be output only if its score is higher than this value.", "tagAttributes": {"name": "outFilterScoreMin", "default": "0", "optionName": "--outFilterScoreMin", "positional": "false", "admin": "false", "range": "0:", "type": "string", "class": "FloatRange"}, "tagName": "parameter"}, {"tagValue": "OutFilterScoreMin normalized to read length (sum of mates&apos; lengths for paired-end reads).", "tagAttributes": {"name": "outFilterScoreMinOverLread", "default": "0.66", "optionName": "--outFilterScoreMinOverLread", "positional": "false", "admin": "false", "range": "0:1", "type": "string", "class": "FloatRange"}, "tagName": "parameter"}, {"tagValue": "Deletion extension penalty per base (in addition to scoreDelOpen).", "tagAttributes": {"name": "scoreDelBase", "default": "-2", "optionName": "--scoreDelBase", "positional": "false", "admin": "false", "range": ":", "type": "string", "class": "FloatRange"}, "tagName": "parameter"}, {"tagValue": "Deletion open penalty.", "tagAttributes": {"name": "scoreDelOpen", "default": "-2", "optionName": "--scoreDelOpen", "positional": "false", "admin": "false", "range": ":", "type": "string", "class": "FloatRange"}, "tagName": "parameter"}, {"tagValue": "Gap open penalty.", "tagAttributes": {"name": "scoreGap", "default": "0", "optionName": "--scoreGap", "positional": "false", "admin": "false", "range": ":", "type": "string", "class": "FloatRange"}, "tagName": "parameter"}, {"tagValue": "AT/AC and GT/AT gap open penalty (in addition to scoreGap).", "tagAttributes": {"name": "scoreGapATAC", "default": "-8", "optionName": "--scoreGapATAC", "positional": "false", "admin": "false", "range": ":", "type": "string", "class": "FloatRange"}, "tagName": "parameter"}, {"tagValue": "GC/AG and CT/GC gap open penalty (in addition to scoreGap).", "tagAttributes": {"name": "scoreGapGCAG", "default": "-4", "optionName": "--scoreGapGCAG", "positional": "false", "admin": "false", "range": ":", "type": "string", "class": "FloatRange"}, "tagName": "parameter"}, {"tagValue": "Non-canonical gap open penalty (in addition to scoreGap).", "tagAttributes": {"name": "scoreGapNoncan", "default": "-8", "optionName": "--scoreGapNoncan", "positional": "false", "admin": "false", "range": ":", "type": "string", "class": "FloatRange"}, "tagName": "parameter"}, {"tagValue": "Extra score logarithmically scaled with genomic length of the alignment according to scoreGenomicLengthLog2scale * log2(genomicLength).", "tagAttributes": {"name": "scoreGenomicLengthLog2scale", "default": "-0.25", "optionName": "--scoreGenomicLengthLog2scale", "positional": "false", "admin": "false", "range": ":", "type": "string", "class": "FloatRange"}, "tagName": "parameter"}, {"tagValue": "Insertion extension penalty per base (in addition to scoreInsOpen).", "tagAttributes": {"name": "scoreInsBase", "default": "-2", "optionName": "--scoreInsBase", "positional": "false", "admin": "false", "range": ":", "type": "string", "class": "FloatRange"}, "tagName": "parameter"}, {"tagValue": "Insertion open penalty.", "tagAttributes": {"name": "scoreInsOpen", "default": "-2", "optionName": "--scoreInsOpen", "positional": "false", "admin": "false", "range": ":", "type": "string", "class": "FloatRange"}, "tagName": "parameter"}, {"tagValue": "Maximum score reduction while searching for splice junction boundaries in the stitching step.", "tagAttributes": {"name": "scoreStitchSJshift", "default": "1", "optionName": "--scoreStitchSJshift", "positional": "false", "admin": "false", "range": ":", "type": "string", "class": "FloatRange"}, "tagName": "parameter"}, {"tagValue": "SeedSearchStartLmax normalized to read length (sum of mates&apos; lengths for paired-end reads).", "tagAttributes": {"name": "seedSearchStartLmaxOverLread", "default": "1", "optionName": "--seedSearchStartLmaxOverLread", "positional": "false", "admin": "false", "range": "0:1", "type": "string", "class": "FloatRange"}, "tagName": "parameter"}, {"tagValue": "Extra alignment score for alignmets that cross database junctions.", "tagAttributes": {"name": "sjdbScore", "default": "2", "optionName": "--sjdbScore", "positional": "false", "admin": "false", "range": ":", "type": "string", "class": "FloatRange"}, "tagName": "parameter"}, {"tagValue": "Number(s) of bases to clip from 3&apos; of each mate after the adapter clipping. If one value is given, it will be assumed the same for both mates.", "tagAttributes": {"name": "clip3pAfterAdapterNbases", "default": "0", "optionName": "--clip3pAfterAdapterNbases", "positional": "false", "admin": "false", "range": "(0:){1,2}", "type": "string", "class": "IntMultiOptionOnce"}, "tagName": "parameter"}, {"tagValue": "Number(s) of bases to clip from 3&apos; of each mate. If one value is given, it will be assumed the same for both mates.", "tagAttributes": {"name": "clip3pNbases", "default": "0", "optionName": "--clip3pNbases", "positional": "false", "admin": "false", "range": "(0:){1,2}", "type": "string", "class": "IntMultiOptionOnce"}, "tagName": "parameter"}, {"tagValue": "Number(s) of bases to clip from 5&apos; of each mate. If one value is given, it will be assumed the same for both mates.", "tagAttributes": {"name": "clip5pNbases", "default": "0", "optionName": "--clip5pNbases", "positional": "false", "admin": "false", "range": "(0:){1,2}", "type": "string", "class": "IntMultiOptionOnce"}, "tagName": "parameter"}, {"tagValue": "4 x INT: Minimum total (multi-mapping + unique) read count per junction for: (1) non-canonical motifs, (2) GT/AG and CT/AC motif, (3) GC/AG and CT/GC motif, (4) AT/AC and GT/AT motif (-1 = no output for that motif). Junctions are output if either of --outSJfilterCountUniqueMin or --outSJfilterCountTotalMin are satisfied. Does not apply to annotated junctions.", "tagAttributes": {"name": "outSJfilterCountTotalMin", "default": "3 1 1 1", "optionName": "--outSJfilterCountTotalMin", "positional": "false", "admin": "false", "range": "(0:){4}", "type": "string", "class": "IntMultiOptionOnce"}, "tagName": "parameter"}, {"tagValue": "4 x INT: Minimum uniquely mapping read count per junction for: (1) non-canonical motifs, (2) GT/AG and CT/AC motif, (3) GC/AG and CT/GC motif, (4) AT/AC and GT/AT motif (-1 = no output for that motif). Junctions are output if either of --outSJfilterCountUniqueMin or --outSJfilterCountTotalMin are satisfied. Does not apply to annotated junctions.", "tagAttributes": {"name": "outSJfilterCountUniqueMin", "default": "3 1 1 1", "optionName": "--outSJfilterCountUniqueMin", "positional": "false", "admin": "false", "range": "(-1:){4}", "type": "string", "class": "IntMultiOptionOnce"}, "tagName": "parameter"}, {"tagValue": "4 x INT: Minimum allowed distance to other junctions&apos; donor/acceptor. Does not apply to annotated junctions.", "tagAttributes": {"name": "outSJfilterDistToOtherSJmin", "default": "10 0 5 10", "optionName": "--outSJfilterDistToOtherSJmin", "positional": "false", "admin": "false", "range": "(]0:){4}", "type": "string", "class": "IntMultiOptionOnce"}, "tagName": "parameter"}, {"tagValue": "N x INT: Maximum gap allowed for junctions supported by 1,2,3,...,N reads, i.e. junctions supported by 1, 2, 3, &gt;=4 reads can have gaps &lt;= INT1, INT2, INT3, --alignIntronMax bases, respectively. Does not apply to annotated junctions.", "tagAttributes": {"name": "outSJfilterIntronMaxVsReadN", "default": "50000 100000 200000", "optionName": "--outSJfilterIntronMaxVsReadN", "positional": "false", "admin": "false", "range": "(]0:){1,}", "type": "string", "class": "IntMultiOptionOnce"}, "tagName": "parameter"}, {"tagValue": "4 x INT: Minimum overhang length for splice junctions on both sides for: (1) non-canonical motifs, (2) GT/AG and CT/AC motif, (3) GC/AG and CT/GC motif, (4) AT/AC and GT/AT motif (-1 = no output for that motif). Does not apply to annotated junctions.", "tagAttributes": {"name": "outSJfilterOverhangMin", "default": "30 12 12 12", "optionName": "--outSJfilterOverhangMin", "positional": "false", "admin": "false", "range": "(-1:){4}", "type": "string", "class": "IntMultiOptionOnce"}, "tagName": "parameter"}, {"tagValue": "Maximum intron size. If 0, maximum intron size will be determined by 2^winBinNbits * winAnchorDistNbins.", "tagAttributes": {"name": "alignIntronMax", "default": "0", "optionName": "--alignIntronMax", "positional": "false", "admin": "false", "range": "0:", "type": "string", "class": "IntRange"}, "tagName": "parameter"}, {"tagValue": "Minimum intron size. Genomic gap is considered intron (rather than a deletion) if its length is equal to or greater than the specified value.", "tagAttributes": {"name": "alignIntronMin", "default": "21", "optionName": "--alignIntronMin", "positional": "false", "admin": "false", "range": "0:", "type": "string", "class": "IntRange"}, "tagName": "parameter"}, {"tagValue": "Maximum gap between two mates. If 0, maximum intron gap will be determined by 2^winBinNbits * winAnchorDistNbins.", "tagAttributes": {"name": "alignMatesGapMax", "default": "0", "optionName": "--alignMatesGapMax", "positional": "false", "admin": "false", "range": "0:", "type": "string", "class": "IntRange"}, "tagName": "parameter"}, {"tagValue": "Minimum overhang (i.e. block size) for annotated (sjdb) spliced alignments.", "tagAttributes": {"name": "alignSJDBoverhangMin", "default": "3", "optionName": "--alignSJDBoverhangMin", "positional": "false", "admin": "false", "range": "]0:", "type": "string", "class": "IntRange"}, "tagName": "parameter"}, {"tagValue": "Minimum overhang (i.e. block size) for spliced alignments.", "tagAttributes": {"name": "alignSJoverhangMin", "default": "5", "optionName": "--alignSJoverhangMin", "positional": "false", "admin": "false", "range": "]0:", "type": "string", "class": "IntRange"}, "tagName": "parameter"}, {"tagValue": "Minimum mapped length for a read mate that is spliced.", "tagAttributes": {"name": "alignSplicedMateMapLmin", "default": "0", "optionName": "--alignSplicedMateMapLmin", "positional": "false", "admin": "false", "range": "]0:", "type": "string", "class": "IntRange"}, "tagName": "parameter"}, {"tagValue": "Maximum number of different alignments per read to consider.", "tagAttributes": {"name": "alignTranscriptsPerReadNmax", "default": "10000", "optionName": "--alignTranscriptsPerReadNmax", "positional": "false", "admin": "false", "range": "]0:", "type": "string", "class": "IntRange"}, "tagName": "parameter"}, {"tagValue": "Maximum number of transcripts per window.", "tagAttributes": {"name": "alignTranscriptsPerWindowNmax", "default": "100", "optionName": "--alignTranscriptsPerWindowNmax", "positional": "false", "admin": "false", "range": "]0:", "type": "string", "class": "IntRange"}, "tagName": "parameter"}, {"tagValue": "Maximum number of windows per read.", "tagAttributes": {"name": "alignWindowsPerReadNmax", "default": "10000", "optionName": "--alignWindowsPerReadNmax", "positional": "false", "admin": "false", "range": "]0:", "type": "string", "class": "IntRange"}, "tagName": "parameter"}, {"tagValue": "Number of bases from the 5&apos; of mate 2 to use in collapsing (e.g. for RAMPAGE).", "tagAttributes": {"name": "bamRemoveDuplicatesMate2basesN", "default": "0", "optionName": "--bamRemoveDuplicatesMate2basesN", "positional": "false", "admin": "true", "range": "]0:", "type": "string", "class": "IntRange"}, "tagName": "parameter"}, {"tagValue": "Minimum overhang for a chimeric junction.", "tagAttributes": {"name": "chimJunctionOverhangMin", "default": "20", "optionName": "--chimJunctionOverhangMin", "positional": "false", "admin": "false", "range": "]0:", "type": "string", "class": "IntRange"}, "tagName": "parameter"}, {"tagValue": "Maximum drop (difference) of chimeric score (the sum of scores of all chimeric segements) from the read length.", "tagAttributes": {"name": "chimScoreDropMax", "default": "20", "optionName": "--chimScoreDropMax", "positional": "false", "admin": "false", "range": "0:", "type": "string", "class": "IntRange"}, "tagName": "parameter"}, {"tagValue": "Minimum total (summed) score of the chimeric segments.", "tagAttributes": {"name": "chimScoreMin", "default": "0", "optionName": "--chimScoreMin", "positional": "false", "admin": "false", "range": "0:", "type": "string", "class": "IntRange"}, "tagName": "parameter"}, {"tagValue": "Minimum difference (separation) between the best and the next best chimeric score.", "tagAttributes": {"name": "chimScoreSeparation", "default": "10", "optionName": "--chimScoreSeparation", "positional": "false", "admin": "false", "range": "0:", "type": "string", "class": "IntRange"}, "tagName": "parameter"}, {"tagValue": "Minimum length of chimeric segment length (0 = no chimeric output).", "tagAttributes": {"name": "chimSegmentMin", "default": "0", "optionName": "--chimSegmentMin", "positional": "false", "admin": "false", "range": "0:", "type": "string", "class": "IntRange"}, "tagName": "parameter"}, {"tagValue": "Equals log2(chrBin), where chrBin is the size of the bins for genome storage. Each chromosome will occupy an integer number of bins.", "tagAttributes": {"name": "genomeChrBinNbits", "default": "18", "optionName": "--genomeChrBinNbits", "positional": "false", "admin": "false", "range": "0:", "type": "string", "class": "IntRange"}, "tagName": "parameter"}, {"tagValue": "Length (bases) of the suffix array pre-indexing string (typically between 10 and 15). Longer strings will use much more memory, but allow faster searches.", "tagAttributes": {"name": "genomeSAindexNbases", "default": "14", "optionName": "--genomeSAindexNbases", "positional": "false", "admin": "false", "range": "10:15", "type": "string", "class": "IntRange"}, "tagName": "parameter"}, {"tagValue": "Suffix array sparsity, i.e. the distance between indices. Use bigger numbers to decrease needed RAM at the cost of mapping speed reduction.", "tagAttributes": {"name": "genomeSAsparseD", "default": "1", "optionName": "--genomeSAsparseD", "positional": "false", "admin": "false", "range": "]0:", "type": "string", "class": "IntRange"}, "tagName": "parameter"}, {"tagValue": "Maximum available RAM for sorting BAM. If 0, it will be set to the genome index size. 0 value can only be used with --genomeLoad NoSharedMemory option.", "tagAttributes": {"name": "limitBAMsortRAM", "default": "0", "optionName": "--limitBAMsortRAM", "positional": "false", "admin": "true", "range": "0:", "type": "string", "class": "IntRange"}, "tagName": "parameter"}, {"tagValue": "Maximum available RAM (bytes) for genome generation.", "tagAttributes": {"name": "limitGenomeGenerateRAM", "default": "31000000000", "optionName": "--limitGenomeGenerateRAM", "positional": "false", "admin": "true", "range": "]0:", "type": "string", "class": "IntRange"}, "tagName": "parameter"}, {"tagValue": "Maximum available buffers size (bytes) for input/output, per thread.", "tagAttributes": {"name": "limitIObufferSize", "default": "150000000", "optionName": "--limitIObufferSize", "positional": "false", "admin": "true", "range": "]0:", "type": "string", "class": "IntRange"}, "tagName": "parameter"}, {"tagValue": "Maximum size of the SAM record for one read. Recommended value: &gt; 2* (LengthMate1 + LengthMate2 + 100) * outFilterMultimapNmax.", "tagAttributes": {"name": "limitOutSAMoneReadBytes", "default": "100000", "optionName": "--limitOutSAMoneReadBytes", "positional": "false", "admin": "true", "range": "]0:", "type": "string", "class": "IntRange"}, "tagName": "parameter"}, {"tagValue": "Maximum number of collapsed junctions.", "tagAttributes": {"name": "limitOutSJcollapsed", "default": "1000000", "optionName": "--limitOutSJcollapsed", "positional": "false", "admin": "false", "range": "]0:", "type": "string", "class": "IntRange"}, "tagName": "parameter"}, {"tagValue": "Maximum number of junctions for one read (including all multi-mappers).", "tagAttributes": {"name": "limitOutSJoneRead", "default": "1000", "optionName": "--limitOutSJoneRead", "positional": "false", "admin": "false", "range": "]0:", "type": "string", "class": "IntRange"}, "tagName": "parameter"}, {"tagValue": "BAM compression level (-1 = default compression, 0=no compression, 10=maximum compression).", "tagAttributes": {"name": "outBAMcompression", "default": "1", "optionName": "--outBAMcompression", "positional": "false", "admin": "true", "range": "-1:10", "type": "string", "class": "IntRange"}, "tagName": "parameter"}, {"tagValue": "Number of threads for BAM sorting. 0 will default to the minimum of 6 and the value of --runThreadN.", "tagAttributes": {"name": "outBAMsortingThreadN", "default": "{{CORES}}", "optionName": "--outBAMsortingThreadN", "positional": "false", "admin": "true", "range": "0:", "type": "string", "class": "IntRange"}, "tagName": "parameter"}, {"tagValue": "Alignment will be output only if the number of matched bases is higher than this value.", "tagAttributes": {"name": "outFilterMatchNmin", "default": "0", "optionName": "--outFilterMatchNmin", "positional": "false", "admin": "false", "range": "0:", "type": "string", "class": "IntRange"}, "tagName": "parameter"}, {"tagValue": "Alignment will be output only if it has fewer mismatches than this value.", "tagAttributes": {"name": "outFilterMismatchNmax", "default": "10", "optionName": "--outFilterMismatchNmax", "positional": "false", "admin": "false", "range": "0:", "type": "string", "class": "IntRange"}, "tagName": "parameter"}, {"tagValue": "Read alignments will be output only if the read maps fewer than this value, otherwise no alignments will be output.", "tagAttributes": {"name": "outFilterMultimapNmax", "default": "10", "optionName": "--outFilterMultimapNmax", "positional": "false", "admin": "false", "range": "2:", "type": "string", "class": "IntRange"}, "tagName": "parameter"}, {"tagValue": "Score difference to the maximum score to be considered for reporting multimapping alignments.", "tagAttributes": {"name": "outFilterMultimapScoreRange", "default": "1", "optionName": "--outFilterMultimapScoreRange", "positional": "false", "admin": "false", "range": "0:", "type": "string", "class": "IntRange"}, "tagName": "parameter"}, {"tagValue": "Add this number to the quality score (e.g. to convert from Illumina to Sanger, use -31).", "tagAttributes": {"name": "outQSconversionAdd", "default": "0", "optionName": "--outQSconversionAdd", "positional": "false", "admin": "true", "range": ":", "type": "string", "class": "IntRange"}, "tagName": "parameter"}, {"tagValue": "SAM FLAG will be bitwise AND&apos;d with this value, i.e. FLAG=FLAG &amp; outSAMflagOR. This is applied after all flags have been set by STAR, but before outSAMflagOR. Can be used to unset specific bits that are not set otherwise.", "tagAttributes": {"name": "outSAMflagAND", "default": "65535", "optionName": "--outSAMflagAND", "positional": "false", "admin": "true", "range": "0:65535", "type": "string", "class": "IntRange"}, "tagName": "parameter"}, {"tagValue": "SAM FLAG will be bitwise OR&apos;d with this value, i.e. FLAG=FLAG | outSAMflagOR. This is applied after all flags have been set by STAR, and after outSAMflagAND. Can be used to set specific bits that are not set otherwise.", "tagAttributes": {"name": "outSAMflagOR", "default": "0", "optionName": "--outSAMflagOR", "positional": "false", "admin": "true", "range": "0:65535", "type": "string", "class": "IntRange"}, "tagName": "parameter"}, {"tagValue": "SAM MAPQ value for unique mappers.", "tagAttributes": {"name": "outSAMmapqUnique", "default": "255", "optionName": "--outSAMmapqUnique", "positional": "false", "admin": "true", "range": "0:255", "type": "string", "class": "IntRange"}, "tagName": "parameter"}, {"tagValue": "Transcriptome BAM compression level (-1 = default compression, 0=no compression, 10=maximum compression).", "tagAttributes": {"name": "quantTranscriptomeBAMcompression", "default": "-1", "optionName": "--quantTranscriptomeBAMcompression", "positional": "false", "admin": "true", "range": "-1:10", "type": "string", "class": "IntRange"}, "tagName": "parameter"}, {"tagValue": "Number of reads to map from the beginning of the file (-1 = map all reads).", "tagAttributes": {"name": "readMapNumber", "default": "-1", "optionName": "--readMapNumber", "positional": "false", "admin": "false", "range": "-1:", "type": "string", "class": "IntRange"}, "tagName": "parameter"}, {"tagValue": "Number of threads to run STAR.", "tagAttributes": {"name": "runThreadN", "default": "{{CORES}}", "optionName": "--runThreadN", "positional": "false", "admin": "true", "range": "1:48", "type": "string", "class": "IntRange"}, "tagName": "parameter"}, {"tagValue": "Only pieces that map fewer than this value are utilized in the stitching procedure.", "tagAttributes": {"name": "seedMultimapNmax", "default": "10000", "optionName": "--seedMultimapNmax", "positional": "false", "admin": "false", "range": "]0:", "type": "string", "class": "IntRange"}, "tagName": "parameter"}, {"tagValue": "Maximum number of &apos;one seed loci&apos; per window.", "tagAttributes": {"name": "seedNoneLociPerWindow", "default": "10", "optionName": "--seedNoneLociPerWindow", "positional": "false", "admin": "false", "range": "]0:", "type": "string", "class": "IntRange"}, "tagName": "parameter"}, {"tagValue": "Maximum number of seeds per read.", "tagAttributes": {"name": "seedPerReadNmax", "default": "1000", "optionName": "--seedPerReadNmax", "positional": "false", "admin": "false", "range": "]0:", "type": "string", "class": "IntRange"}, "tagName": "parameter"}, {"tagValue": "Maximum number of seeds per window.", "tagAttributes": {"name": "seedPerWindowNmax", "default": "50", "optionName": "--seedPerWindowNmax", "positional": "false", "admin": "false", "range": "]0:", "type": "string", "class": "IntRange"}, "tagName": "parameter"}, {"tagValue": "Defines the maximum length of the seeds. If 0, maximum seed length is infinite.", "tagAttributes": {"name": "seedSearchLmax", "default": "0", "optionName": "--seedSearchLmax", "positional": "false", "admin": "false", "range": "0:", "type": "string", "class": "IntRange"}, "tagName": "parameter"}, {"tagValue": "Defines the search start point through the read. The read is split into pieces no longer than this value.", "tagAttributes": {"name": "seedSearchStartLmax", "default": "50", "optionName": "--seedSearchStartLmax", "positional": "false", "admin": "false", "range": "]0:", "type": "string", "class": "IntRange"}, "tagName": "parameter"}, {"tagValue": "Length of the donor/acceptor sequence on each side of the junctions, ideally mate_length - 1 (0 = splice junction database is not used).", "tagAttributes": {"name": "sjdbOverhang", "default": "0", "optionName": "--sjdbOverhang", "positional": "false", "admin": "false", "range": "0:", "type": "string", "class": "IntRange"}, "tagName": "parameter"}, {"tagValue": "Number of reads to process for the 1st step (0 = 1-step only, no 2nd pass; use -1 or very large number to map all reads in the first step).", "tagAttributes": {"name": "twopass1readsN", "default": "-1", "optionName": "--twopass1readsN", "positional": "false", "admin": "false", "range": "]0:", "type": "string", "class": "IntRange"}, "tagName": "parameter"}, {"tagValue": "Maximum number of bins between two anchors that allows aggregation of anchors into one window.", "tagAttributes": {"name": "winAnchorDistNbins", "default": "9", "optionName": "--winAnchorDistNbins", "positional": "false", "admin": "false", "range": "]0:", "type": "string", "class": "IntRange"}, "tagName": "parameter"}, {"tagValue": "Maximum number of loci anchors are allowed to map to.", "tagAttributes": {"name": "winAnchorMultimapNmax", "default": "50", "optionName": "--winAnchorMultimapNmax", "positional": "false", "admin": "false", "range": "]0:", "type": "string", "class": "IntRange"}, "tagName": "parameter"}, {"tagValue": "Equals log2(winBin), where winBin is the size of the bin for the window clustering. Each window will occupy an integer number of bins.", "tagAttributes": {"name": "winBinNbits", "default": "16", "optionName": "--winBinNbits", "positional": "false", "admin": "false", "range": "]0:", "type": "string", "class": "IntRange"}, "tagName": "parameter"}, {"tagValue": "Equals log2(winFlank), where winFlank is the size of the left and right flanking regions for each window.", "tagAttributes": {"name": "winFlankNbins", "default": "4", "optionName": "--winFlankNbins", "positional": "false", "admin": "false", "range": "]0:", "type": "string", "class": "IntRange"}, "tagName": "parameter"}, {"tagValue": "Path to the shell binary, preferrably bash, e.g. /bin/bash (- = The default shell is executed, typically /bin/sh, but this was reported to fail on some systems).", "tagAttributes": {"name": "sysShell", "default": "-", "optionName": "--sysShell", "positional": "false", "admin": "true", "range": "[-]", "type": "string", "class": "PathOrString"}, "tagName": "parameter"}, {"tagValue": "Path to a directory that will be used as temporary by STAR. All contents of this directory will be removed (- = the temp directory will default to outFileNamePrefix_STARtmp).", "tagAttributes": {"name": "outTmpDir", "default": "{{TEMPDIR}}/tmp_STAR", "optionName": "--outTmpDir", "positional": "false", "admin": "true", "range": "[-]", "type": "string", "class": "PathOrString"}, "tagName": "parameter"}, {"tagValue": "Prefix for chromosome names in a GTF file (e.g. &apos;chr&apos; for using ENSMEBL annotations with UCSC genomes).", "tagAttributes": {"name": "sjdbGTFchrPrefix", "default": "-", "optionName": "--sjdbGTFchrPrefix", "positional": "false", "admin": "true", "range": "n/a", "type": "string", "class": "String"}, "tagName": "parameter"}, {"tagValue": "Feature type in GTF file to be used as exons for building transcripts.", "tagAttributes": {"name": "sjdbGTFfeatureExon", "default": "exon", "optionName": "--sjdbGTFfeatureExon", "positional": "false", "admin": "true", "range": "n/a", "type": "string", "class": "String"}, "tagName": "parameter"}, {"tagValue": "Tag name to be used as exons&apos; transcript-parents (default &quot;transcript_id&quot; works for GTF files).", "tagAttributes": {"name": "sjdbGTFtagExonParentTranscript", "default": "transcript_id", "optionName": "--sjdbGTFtagExonParentTranscript", "positional": "false", "admin": "true", "range": "n/a", "type": "string", "class": "String"}, "tagName": "parameter"}, {"tagValue": "Tag name to be used as exons&apos; gene-parents (default &quot;gene_id&quot; works for GTF files).", "tagAttributes": {"name": "sjdbGTFtagExonParentGene", "default": "gene_id", "optionName": "--sjdbGTFtagExonParentGene", "positional": "false", "admin": "true", "range": "n/a", "type": "string", "class": "String"}, "tagName": "parameter"}, {"tagValue": "Prefix matching reference names to include in the output wiggle file, e.g. &quot;chr&quot; (- = include all references).", "tagAttributes": {"name": "outWigReferencesPrefix", "default": "-", "optionName": "--outWigReferencesPrefix", "positional": "false", "admin": "true", "range": "n/a", "type": "string", "class": "String"}, "tagName": "parameter"}, {"tagValue": "Add SAM/BAM read group line(s) to the SAM header (- = no read group line is added). The first word contains the read group identifier and must start with &quot;ID:&quot;, e.g. --outSAMattrRGline ID:XXX CN:YY &quot;DS:Z Z Z&quot;. XXX will be added as RG tag to each output alignment. Any spaces in the tag values have to be double quoted. Comma separated RG lines correspond to different (comma separated) input files in --readFilesIn. Commas have to be surrounded by spaces, e.g. --outSAMattrRGline ID:XXX , ID:ZZZ &quot;DS:Z Z&quot; , ID:YYY DS:YYYY.", "tagAttributes": {"name": "outSAMattrRGline", "default": "-", "optionName": "--outSAMattrRGline", "positional": "false", "admin": "false", "range": "n/a{1,}", "type": "string", "class": "StringMultiOptionOnce"}, "tagName": "parameter"}, {"tagValue": "Add @HD (header) line(s) to the SAM header (- = no line is added).", "tagAttributes": {"name": "outSAMheaderHD", "default": "-", "optionName": "--outSAMheaderHD", "positional": "false", "admin": "false", "range": "n/a{1,}", "type": "string", "class": "StringMultiOptionOnce"}, "tagName": "parameter"}, {"tagValue": "Add @PG (software) line(s) to the SAM header (in addition to STAR; - = no line is added).", "tagAttributes": {"name": "outSAMheaderPG", "default": "-", "optionName": "--outSAMheaderPG", "positional": "false", "admin": "false", "range": "n/a{1,}", "type": "string", "class": "StringMultiOptionOnce"}, "tagName": "parameter"}, {"tagValue": "Type/mode of the run. One of (1) alignReads (map reads), (2) genomeGenerate (generate genome/index files), (3) inputAlignmentsFromBAM (input alignments from BAM. Presently only works with --outWigType and --bamRemoveDuplicates).", "tagAttributes": {"name": "runMode", "default": "alignReads", "optionName": "--runMode", "positional": "false", "admin": "false", "range": "[alignReads,genomeGenerate,inputAlignmentsFromBAM]", "type": "string", "class": "StringSet"}, "tagName": "parameter"}, {"tagValue": "Mode of shared memory usage for the genome files. One of (1) LoadAndKeep (load genome into shared and keep it in memory after run), (2) LoadAndRemove (load genome into shared but remove it after run), (3) LoadAndExit (load genome into shared memory and exit, keeping the genome in memory for future runs), (4) Remove (do not map anything, just remove loaded genome from memory), (5) NoSharedMemory (do not use shared memory, each job will have its own private copy of the genome).", "tagAttributes": {"name": "genomeLoad", "default": "NoSharedMemory", "optionName": "--genomeLoad", "positional": "false", "admin": "true", "range": "[LoadAndKeep,LoadAndRemove,LoadAndExit,Remove,NoSharedMemory]", "type": "string", "class": "StringSet"}, "tagName": "parameter"}, {"tagValue": "Output that will be directed to STDOUT. One of (1) Log (log messages), (2) SAM (alignments in SAM format; normally directed to Aligned.out.sam), (3) BAM_Unsorted (alignments in BAM format, unsorted; requires --outSAMtype BAM Unsorted), (4) BAM_SortedByCoordinate (alignments in BAM format, sorted by coordinates; requires --outSAMtype BAM SortedByCoordinate), (5) BAM_Quant (alignments to transcriptome in BAM format, unsorted; requires --quantMode TranscriptomeSAM). If not Log, log messages will be directed to file Log.std.out.", "tagAttributes": {"name": "outStd", "default": "Log", "optionName": "--outStd", "positional": "false", "admin": "true", "range": "[Log,SAM,BAM_Unsorted,BAM_SortedByCoordinate,BAM_Quant]", "type": "string", "class": "StringSet"}, "tagName": "parameter"}, {"tagValue": "Output of unmapped reads (besides SAM). One of (1) None (no output), (2) Fastx (output in separate fasta/fastq files: Unmapped.out.mate1/2).", "tagAttributes": {"name": "outReadsUnmapped", "default": "None", "optionName": "--outReadsUnmapped", "positional": "false", "admin": "true", "range": "[None,Fastx]", "type": "string", "class": "StringSet"}, "tagName": "parameter"}, {"tagValue": "Mode of SAM output. One of (1) None (no SAM output), (2) Full (full SAM output), (3) NoQS (SAM output without quality scores).", "tagAttributes": {"name": "outSAMmode", "default": "Full", "optionName": "--outSAMmode", "positional": "false", "admin": "true", "range": "[None,Full,NoQS]", "type": "string", "class": "StringSet"}, "tagName": "parameter"}, {"tagValue": "Cufflinks-like strand TAG. One of (1) None (not used), (2) intronMotif (strand derived from the intron motif; reads with inconsistent and/or non-canonical introns are filtered out).", "tagAttributes": {"name": "outSAMstrandField", "default": "None", "optionName": "--outSAMstrandField", "positional": "false", "admin": "false", "range": "[None, intronMotif]", "type": "string", "class": "StringSet"}, "tagName": "parameter"}, {"tagValue": "Output of unmapped reads in the SAM format. One of (1) None (no output), (2) Within (output unmapped reads within the main SAM file).", "tagAttributes": {"name": "outSAMunmapped", "default": "Within", "optionName": "--outSAMunmapped", "positional": "false", "admin": "false", "range": "[None,Within]", "type": "string", "class": "StringSet"}, "tagName": "parameter"}, {"tagValue": "Type of sorting for the SAM output. One of (1) Paired (one mate after the other for all paired alignments), (2) PairedKeepInputOrder (one mate after the other for all paired alignments, the order is kept the same as in the input FASTQ files).", "tagAttributes": {"name": "outSAMorder", "default": "Paired", "optionName": "--outSAMorder", "positional": "false", "admin": "true", "range": "[Paired,PairedKeepInputOrder]", "type": "string", "class": "StringSet"}, "tagName": "parameter"}, {"tagValue": "Alignments to be considered primary. All others will be marked with 0x100 bit in the FLAG. One of (1) OneBestScore (only one alignment with the best score is primary), (2) AllBestScore (all alignments with the best score are primary).", "tagAttributes": {"name": "outSAMprimaryFlag", "default": "OneBestScore", "optionName": "--outSAMprimaryFlag", "positional": "false", "admin": "false", "range": "[OneBestScore,AllBestScore]", "type": "string", "class": "StringSet"}, "tagName": "parameter"}, {"tagValue": "Read ID record type. One of (1) Standard (first word, i.e. until space, from the FASTx read ID line, removing /1, /2 from the end), (2) Number (read number in the FASTx file).", "tagAttributes": {"name": "outSAMreadID", "default": "Standard", "optionName": "--outSAMreadID", "positional": "false", "admin": "true", "range": "[Standard,Number]", "type": "string", "class": "StringSet"}, "tagName": "parameter"}, {"tagValue": "Mark duplicates in the BAM file (for now only works with sorted BAM, feeded with inputBAMfile). One of (1) - (no duplicate removal/marking), (2) UniqueIdentical (mark all multimappers and duplicate unique mappers; coordinates, FLAG &amp; CIGAR must be identical).", "tagAttributes": {"name": "bamRemoveDuplicatesType", "default": "-", "optionName": "--bamRemoveDuplicatesType", "positional": "false", "admin": "true", "range": "[-,UniqueIdentical]", "type": "string", "class": "StringSet"}, "tagName": "parameter"}, {"tagValue": "Type of normalization for the signal. One of (1) RPM (reads per million mapped reads), (2) None (no normalization; &apos;raw counts&apos;).", "tagAttributes": {"name": "outWigNorm", "default": "RPM", "optionName": "--outWigNorm", "positional": "false", "admin": "true", "range": "[RPM,None]", "type": "string", "class": "StringSet"}, "tagName": "parameter"}, {"tagValue": "Type of filtering. One of (1) Normal (standard filtering using only current alignment), (2) BySJout (keep only those reads that contain junctions that passed filtering into SJ.out.tab).", "tagAttributes": {"name": "outFilterType", "default": "Normal", "optionName": "--outFilterType", "positional": "false", "admin": "true", "range": "[Normal,BySJout]", "type": "string", "class": "StringSet"}, "tagName": "parameter"}, {"tagValue": "Fiilter alignments using their motifs. One of (1) None (no filtering), (2) RemoveNoncanonical (filter out alignments that contain non-canonical junctions), (3) RemoveNoncanonicalUnannotated (filter out alignments that contain non-canonical unannotated junctions when using annotated splice junctions database; the annotated non-canonical junctions will be kept).", "tagAttributes": {"name": "outFilterIntronMotifs", "default": "None", "optionName": "--outFilterIntronMotifs", "positional": "false", "admin": "false", "range": "[None,RemoveNoncanonical,RemoveNoncanonicalUnannotated]", "type": "string", "class": "StringSet"}, "tagName": "parameter"}, {"tagValue": "Reads to consider for collapsed splice junctions output. One of (1) All (all reads), (2) Unique (uniquely mapping reads only).", "tagAttributes": {"name": "outSJfilterReads", "default": "All", "optionName": "--outSJfilterReads", "positional": "false", "admin": "false", "range": "[All,Unique]", "type": "string", "class": "StringSet"}, "tagName": "parameter"}, {"tagValue": "Type of read ends alignment. One of (1) Local (standard local alignment with soft-clipping allowed), (2) EndToEnd (force end-to-end read alignment, do not soft-clip).", "tagAttributes": {"name": "alignEndsType", "default": "Local", "optionName": "--alignEndsType", "positional": "false", "admin": "false", "range": "[Local,EndToEnd]", "type": "string", "class": "StringSet"}, "tagName": "parameter"}, {"tagValue": "Allow the soft-clipping of the alignments past the end of the chromosomes. One of (1) Yes (allow), (2) No (prohibit, useful for compatibility with Cufflinks).", "tagAttributes": {"name": "alignSoftClipAtReferenceEnds", "default": "Yes", "optionName": "--alignSoftClipAtReferenceEnds", "positional": "false", "admin": "true", "range": "[Yes,No]", "type": "string", "class": "StringSet"}, "tagName": "parameter"}, {"tagValue": "Lengths of names, sequences, qualities for both mates are the same / not the same. NotEqual is safe in all situations.", "tagAttributes": {"name": "readMatesLengthsIn", "default": "NotEqual", "optionName": "--readMatesLengthsIn", "positional": "false", "admin": "true", "range": "[Equal,NotEqual]", "type": "string", "class": "StringSet"}, "tagName": "parameter"}, {"tagValue": "String: strandedness of wiggle/bedGraph output. One of (1) Stranded (separate strands, str1 and str2), (2) Unstranded (collapsed strands).", "tagAttributes": {"name": "outWigStrand", "default": "Stranded", "optionName": "--outWigStrand", "positional": "false", "admin": "false", "range": "[Stranded,Unstranded]", "type": "string", "class": "StringSet"}, "tagName": "parameter"}, {"tagValue": "2-pass mapping mode. One of (1) None (1-pass mapping), (2) Basic (basic 2-pass mapping, with all 1st pass junctions inserted into the genome indices on the fly).", "tagAttributes": {"name": "twopassMode", "default": "None", "optionName": "--twopassMode", "positional": "false", "admin": "false", "range": "[None,Basic]", "type": "string", "class": "StringSet"}, "tagName": "parameter"}, {"tagValue": "Type of chimeric output. One of (1) SeparateSAMold (output old SAM into separate Chimeric.out.sam file), (2) WithinBAM (output into main aligned BAM files Aligned.*.bam).", "tagAttributes": {"name": "chimOutType", "default": "SeparateSAMold", "optionName": "--chimOutType", "positional": "false", "admin": "true", "range": "[SeparateSAMold,WithinBAM]", "type": "string", "class": "StringSet"}, "tagName": "parameter"}, {"tagValue": "Prohibit specified alignment type(s). One of (1) IndelSoftclipSingleend (prohibit indels, soft clipping and single-end alignments; compatible with RSEM), (2) (prohibit single-end alignments).", "tagAttributes": {"name": "quantTranscriptomeBan", "default": "IndelSoftclipSingleend", "optionName": "--quantTranscriptomeBan", "positional": "false", "admin": "false", "range": "[IndelSoftclipSingleend,Singleend]", "type": "string", "class": "StringSet"}, "tagName": "parameter"}, {"tagValue": "Adapter sequences to clip from 3&apos; of each mate (- = no adapter clipping is done). If one value is given, it will be assumed the same for both mates.", "tagAttributes": {"name": "clip3pAdapterSeq", "default": "-", "optionName": "--clip3pAdapterSeq", "positional": "false", "admin": "false", "range": "{1,2}", "type": "string", "class": "StringSet"}, "tagName": "parameter"}, {"tagValue": "Type of SAM/BAM output. 1st word: (1) BAM (output BAM without sorting), (2) SAM (output SAM without sorting), (3) None (no SAM/BAM output); 2nd/3rd word: (1) Unsorted (standard), (2) SortedByCoordinate (sorted by coordinate; this option will allocate extra memory for sorting which can be specified by --limitBAMsortRAM).", "tagAttributes": {"name": "outSAMtype", "default": "SAM", "optionName": "--outSAMtype", "positional": "false", "admin": "true", "range": "([{{WORD1}}SAM,BAM,None;{{WORD2,3}}Unsorted,Sorted]){1,3}", "type": "string", "class": "StringSetMultiOptionOnce"}, "tagName": "parameter"}, {"tagValue": "Type of signal output, e.g. &quot;bedGraph&quot; OR &quot;bedGraph read1_5p&quot;. Requires sorted BAM, i.e. --outSAMtype BAM SortedByCoordinate . 1st word: (1) None (no signal output), (2) bedGraph (bedGraph format), (3) wiggle (wiggle format); 2nd word: (1) read1_5p (signal from only 5&apos; of the 1st read, useful for CAGE/RAMPAGE etc), (2) read2 (signal from only 2nd read).", "tagAttributes": {"name": "outWigType", "default": "None", "optionName": "--outWigType", "positional": "false", "admin": "false", "range": "([{{WORD1}}None,bedGraph,wiggle;{{WORD2}}read1_5p,read2]){1,2}", "type": "string", "class": "StringSetMultiOptionOnce"}, "tagName": "parameter"}, {"tagValue": "Types of quantification requested. Either - (none) or one or both of (1) TranscriptomeSAM (output SAM/BAM alignments to transcriptome into a separate file), (2) GeneCounts (count reads per gene).", "tagAttributes": {"name": "quantMode", "default": "-", "optionName": "--quantMode", "positional": "false", "admin": "false", "range": "([-,TranscriptomeSAM,GeneCounts]){1,2}", "type": "string", "class": "StringSetMultiOptionOnce"}, "tagName": "parameter"}, {"tagValue": "Desired SAM TAG attributes. One of (1) Standard (NH HI AS nM), (2) All (NH HI AS nM NM MD jM jI), (3) None (no TAG attributes), or (4) a custom string of TAG attributes in the desired order (e.g. NH HI AS nM NM MD jM jI XS).", "tagAttributes": {"name": "outSAMattributes", "default": "Standard", "optionName": "--outSAMattributes", "positional": "false", "admin": "false", "range": "[Standard,All,None]", "type": "string", "class": "StringSetPlusCustom"}, "tagName": "parameter"}], "credits": [{"tagValue": "Alexander Dobin", "tagAttributes": {"email": "dobin@cshl.edu"}, "tagName": "author"}, {"tagValue": "n/a", "tagAttributes": {}, "tagName": "reference"}], "launcher": [{"tagValue": "n/a", "tagAttributes": {"type": "python"}, "tagName": "launcher"}], "outputs": [{"tagValue": "Path to the directory where genome files are stored (if runMode is not generateGenome) or will be generated (if runMode is generateGenome).", "tagAttributes": {"redirect": "false", "name": "OUTDIRMAKE_genomeDir", "optionName": "--genomeDir", "fileClass": "directoryMake", "positional": "false", "optional": "true", "array": "false", "type": "IndexDirSTAR"}, "tagName": "output"}, {"tagValue": "Output files name prefix (including full or relative path).", "tagAttributes": {"redirect": "false", "name": "OUTDIRMAKE_outFileNamePrefix", "optionName": "--outFileNamePrefix", "fileClass": "directoryMake", "positional": "false", "optional": "false", "array": "false", "type": "OutDirSTAR"}, "tagName": "output"}], "optOutBoolParameters": [{"tagValue": "Switch for enabling the optional output port \"--genomeDir\". Set to true in workflow file if this output is desired.", "tagAttributes": {"default": "false", "type": "boolean", "name": "_OUTDIRMAKE_genomeDir"}, "tagName": "parameter"}], "launcherArguments": [{"tagValue": "n/a", "tagAttributes": {"name": "file", "value": "component.py"}, "tagName": "argument"}, {"tagValue": "n/a", "tagAttributes": {"name": "source", "value": "krini_functions.py"}, "tagName": "argument"}], "header": [{"tagValue": "STAR", "tagAttributes": {}, "tagName": "name"}, {"tagValue": "2.4.1c", "tagAttributes": {}, "tagName": "version"}, {"tagValue": "STAR is an ultrafast universal RNA-seq aligner.", "tagAttributes": {}, "tagName": "doc"}], "type-parameters": [{"tagValue": "STAR index directory.", "tagAttributes": {"extends": "Directory", "name": "IndexDirSTAR"}, "tagName": "type-parameter"}, {"tagValue": "FASTQ or FASTA file.", "tagAttributes": {"extends": "Text", "name": "FASTX"}, "tagName": "type-parameter"}, {"tagValue": "GTF file.", "tagAttributes": {"extends": "Text", "name": "GTF"}, "tagName": "type-parameter"}, {"tagValue": "Binary representation of SAM file format.", "tagAttributes": {"extends": "BinaryFile", "name": "BAM"}, "tagName": "type-parameter"}, {"tagValue": "File containing @CO SAM header comment lines.", "tagAttributes": {"extends": "Text", "name": "SAMCommentFile"}, "tagName": "type-parameter"}, {"tagValue": "FASTA file.", "tagAttributes": {"extends": "Text", "name": "FASTA"}, "tagName": "type-parameter"}, {"tagValue": "Tabular file of format: chr &lt;tab&gt; start &lt;tab&gt; end &lt;tab&gt; strand.", "tagAttributes": {"extends": "Text", "name": "SJFileSTAR"}, "tagName": "type-parameter"}, {"tagValue": "STAR output directory.", "tagAttributes": {"extends": "Directory", "name": "OutDirSTAR"}, "tagName": "type-parameter"}], "internalParameters": [{"tagValue": "Path to executable.", "tagAttributes": {"name": "_executable", "default": "/import/bc2/home/zavolan/krini/soft/STAR-2.4.1/bin/STAR_static", "optionName": "_executable", "admin": "true", "range": "n/a", "type": "string", "class": "Path"}, "tagName": "parameter"}, {"tagValue": "Execution mode. One of &apos;remote&apos;, &apos;local&apos; or &apos;none&apos;.", "tagAttributes": {"name": "_execMode", "default": "remote", "optionName": "_execMode", "admin": "true", "range": "[remote,local,none]", "type": "string", "class": "StringSet"}, "tagName": "parameter"}, {"tagValue": "Number of threads.", "tagAttributes": {"name": "_cores", "default": "16", "optionName": "_cores", "admin": "true", "range": "1:48", "type": "string", "class": "IntRange"}, "tagName": "parameter"}, {"tagValue": "Memory per core. Integer, optionally followed by one the follow suffixes: K, M, G.", "tagAttributes": {"name": "_membycore", "default": "3G", "optionName": "_membycore", "admin": "true", "range": "n/a", "type": "string", "class": "DataSizeIntBKMG"}, "tagName": "parameter"}, {"tagValue": "Runtime in h:mm:ss.", "tagAttributes": {"name": "_runtime", "default": "6:00:00", "optionName": "_runtime", "admin": "true", "range": "n/a", "type": "string", "class": "DurationHMS"}, "tagName": "parameter"}], "requires": [{"tagValue": "python", "tagAttributes": {"URL": "http://www.python.org/", "type": "manual", "optional": "false", "name": "Python"}, "tagName": "requires"}, {"tagValue": "STAR", "tagAttributes": {"URL": "https://github.com/alexdobin/STAR/releases", "type": "manual", "optional": "false", "name": "STAR"}, "tagName": "requires"}], "categories": [{"tagValue": "NGS analysis", "tagAttributes": {}, "tagName": "category"}, {"tagValue": "RNA-Seq analysis", "tagAttributes": {}, "tagName": "category"}, {"tagValue": "short read alignment", "tagAttributes": {}, "tagName": "category"}]}